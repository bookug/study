        OCaml version 4.02.1

#           - : string = "sb007"
#   val pi : float = 3.14159265358979312
#   val square : float -> float = <fun>
#   - : float = 1.
#     val fib : int -> int = <fun>
#   - : int = 55
#   val l : string list = ["is"; "a"; "tale"; "told"; "etc."]
# - : string = "is"
# - : string list = ["a"; "tale"; "told"; "etc."]
#   - : int * string * char * float * bool = (3, "sb", 'a', 1.7, false)
# - : string list = ["Life"; "is"; "a"; "tale"; "told"; "etc."]
#                 val sort : 'a list -> 'a list = <fun>
val insert : 'a -> 'a list -> 'a list = <fun>
#   - : string list = ["a"; "etc."; "is"; "tale"; "told"]
#   - : float list = [2.718; 3.14]
#     val deriv : (float -> float) -> float -> float -> float = <fun>
#   val sin' : float -> float = <fun>
#   - : float = -1.00000000013961143
#     val compose : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b = <fun>
#   val cos2 : float -> float = <fun>
#   - : int list = [1; 3; 5; 7; 9]
#         val map : ('a -> 'b) -> 'a list -> 'b list = <fun>
#     type ratio = { num : int; denom : int; }
#       val add_ratio : ratio -> ratio -> ratio = <fun>
# - : ratio = {num = 11; denom = 15}
#   type number = Int of int | Float of float | Error
#   type sign = Positive | Negative
#   val sign_int : int -> sign = <fun>
#                     val add_num : number -> number -> number = <fun>
#   - : number = Float 126.14159
#     type 'a btree = Empty | Node of 'a * 'a btree * 'a btree
#             val search : 'a -> 'a btree -> bool = <fun>
#           val insert : 'a -> 'a btree -> 'a btree = <fun>
#                 val add_vect : float array -> float array -> float array = <fun>
#   - : float array = [|4.; 6.|]
#   *   type mutable_point = { mutable x : float; mutable y : float; }
#     val translate : mutable_point -> float -> float -> unit = <fun>
#   val mypoint : mutable_point = {x = 0.; y = 0.}
#   - : unit = ()
#   - : mutable_point = {x = 1.; y = 2.}
#                         val insertion_sort : 'a array -> unit = <fun>
#   *   val current_rand : int ref = {contents = 0}
#     val random : unit -> int = <fun>
#   *   type 'a ref = { mutable contents : 'a; }
#   val ( ! ) : 'a ref -> 'a = <fun>
#   val ( := ) : 'a ref -> 'a -> unit = <fun>
#   * * *   type idref = { mutable id : 'a. 'a -> 'a; }
#   val r : idref = {id = <fun>}
#   val g : idref -> int * bool = <fun>
#   - : unit = ()
#   called id
called id
- : int * bool = (1, true)
#     exception Empty_List
#         val head : 'a list -> 'a = <fun>
#   - : int = 1
#   Exception: Empty_List.
#   - : string = "one"
#   Exception: Not_found.
#           val name_of_binary_digit : int -> string = <fun>
#   - : string = "zero"
#   - : string = "not a binary digit"
#                 val temporarily_set_reference : 'a ref -> 'a -> (unit -> 'b) -> 'b = <fun>
#                   type expression =
    Const of float
  | Var of string
  | Sum of expression * expression
  | Diff of expression * expression
  | Prod of expression * expression
  | Quot of expression * expression
#   exception Unbound_variable of string
#                   val eval : (string * float) list -> expression -> float = <fun>
#   - : float = 9.42
#                   val deriv : expression -> string -> expression = <fun>
#   - : expression =
Quot (Diff (Prod (Const 0., Var "x"), Prod (Const 1., Const 0.)),
 Prod (Var "x", Var "x"))
#                                                       val print_expr : expression -> unit = <fun>
#   val e : expression = Sum (Prod (Const 2., Var "x"), Const 1.)
#   2. * x + 1.
- : unit = ()
#   0. * x + 2. * 0. + 0.
- : unit = ()
#     
